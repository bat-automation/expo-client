directive @owner on FIELD_DEFINITION
directive @auth on FIELD_DEFINITION

interface Node { 
    id: ID!
}
type Device implements Node { 
    owner: User
    name: String
    usersInvited: [User]
    pendingInvites: [String]
    id: ID!
    createdAt: String
    updatedAt: String
}
type User implements Node { 
    email: String
    id: ID!
    createdAt: String
    updatedAt: String
}
type BaseNode { 
    id: ID!
    createdAt: String
    updatedAt: String
}
type PageInfo { 
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}
type Payload { 
    error: String
}
type ResponsePayload { 
    success: Boolean!
    error: String
}
type LoginPayload { 
    user: User!
}
type MyDevicesPayload { 
    owned: [Device]
    guest: [Device]
}
type RegisterInvitePayload { 
    user: User
    success: Boolean!
    error: String
}
type CreateDevicePayload { 
    token: String!
}
type RegisterWithDevicePayload { 
    success: Boolean
}
type SendInvitePayload { 
    success: Boolean
}
type SwitchedPayload { 
    turned: SWITCH
    device: Device
}
type Query { 
    node(id: ID!): Node
    myDevices: MyDevicesPayload! @auth
}
type Mutation { 
    login: LoginPayload! @auth
    checkEmail(input: CheckEmailInput!): ResponsePayload!
    registerWithInvite: RegisterInvitePayload!
    createDevice(device: CreateDeviceInput!): CreateDevicePayload!
    registerWithDevice(input: RegisterWithDeviceInput!): RegisterWithDevicePayload!
    checkQRCode(input: RegisterWithDeviceInput!): RegisterWithDevicePayload!
    sendInvite(input: SendInviteInput!): SendInvitePayload! @auth
    cancelInvite(input: SendInviteInput!): ResponsePayload! @auth
    switch(input: SwitchInput!): Boolean @auth
}
type Subscription { 
    switched: SwitchedPayload
}
input CheckEmailInput { 
    email: String!
}
input CreateDeviceInput { 
    id: String
}
input RegisterWithDeviceInput { 
    qrcode: String!
    name: String
}
input SendInviteInput { 
    device: ID!
    email: String!
}
input SwitchInput { 
    turn: SWITCH!
    device: ID!
}
enum SWITCH { 
    ON
    OFF
}